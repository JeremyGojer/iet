
Agenda:

	Software Testing:

		Requirement--------------Customer, their business, their end users expectations
		Architecting Solution------Architect, Domain Expert
		Develpoment Team----------programmer, Developer,  UI Designer
		Release Team--------------Build software---Binary deployable images
	
		Software Testing----------Tester, QA, Endusers, Customers
		Operations Team------------maintainance, adminstration, Monitoring
		DevOps Team----------------	
		Zero Defect Product (Service)----------
		
		
		:then why do get to listen tester do not have growth and much salary compared to developer?
			
			QA
			Zero defect Product
			System Requirement Analysis
			Test Plan
			Test cases
			QA process
			
		tester requirement reduced by devops?---------
		
		so after cdac which role we should focus on


Software Testing:
		finding bugs
		finding loop holes in a software
		Quality of software:
		
		Define test plan
		Write  test cases
		Execute tests
		Collect test results
		Report test results to develpoment team
		Esclate vulenrabilities in softwarebuild
		Always check for expected output from the system


		Software testing  is a method 
			wheter the actual software (Product, service, Applicatoin)
			matches expected  requirements.
			it ensuress  software is bug free. ( Zero Defect Software)
			
			The purpose of  ST 
				identify errors, gaps
					 missing requirements

		 White Box Testing
		 Black Box Testing
		 Grey Box Testing

		Advantage of Software testing ?
			Cost Effective:
			Product Quality:
			Customer satisfaction:
			Security:

		Types of Software Testing:
			
			Functional Testing:

					  Unit Testing:
					  Integration Testing: Smoke Testing..
					  

			Non-Functional Testing(Performance Testing):
					Performance
					Endurance
					Load Testing
					Scalability
					Usability

			Maintenance:	Regression Testing

	
	Software Developement:
				Principles of Software Development

				Object Oriented Principles
					pillars of Object Oriented:
						Abstration, Encapsualtion, inheritance & Ploymorphism
						typing, concurrency, modularity, persistence
					

What  the principles of Software Testing:

7 priniciples of Software Testing::

	1. Exhaustive testing is not possible
	2. Defect Clustering
	3. Pesticide paradox
	4. Testing shows a presence of defects
	5. absence of Error----- (Zero Defect Product)
	6. Early Testing
	7. Testing is context dependent


	TDD: (Test Driven Delopment)

	 How do you write a test ?
		
		1. define  a scenario
		2. define expected output
		3. define requirement input

		Module: think of ECommerce Case Study
			Membership
			User Autentication
		
		Test Plan:

		Test case:
			User Autentication:

			1.define output
				expected output:valid User
				expected output:invalid User
			2. define input
				 username
				 password
			User Registration
			Change Password:

		create muliplet test intances:
		
		Use Sampling Data :

			test 1:  username:Ravi passoword:seed          true
			test 2:  username:Sachin passoword:seed         false
			test 3:  username:Minal passoword:ibm		true
			test 4:  username:Ravi passoword:seed		false
			test 5:  username:Sandesh passoword:yuu		true
			test 6:  username:Raj passoword:ppd		true


		Now developer will write :
		
			AccountManager:
					bool	Validate ( username, password){
						bool status=false;
						//get database access
						// define SQL query
						//fire qurey to database
						//get result
						//staus=result
						return status;
					}

		Verification:(QA)
			1.Checking of documents, design,  code,
			2.Does not involve  in code execution-------------at any time
			3.Reviews, walkthroughs, inspections and chekcing resources, environment
			4.Confirms specification
			5.Find bugs before development
			6.QA Team

		Validation: (Testing)
		 	  1.Testing and validation of actual product
			  2.Involve in code execution------------------------at runtime
			  3.Black box testing, white box testing, non-functional testing
			  4.Check software meets expectations
			  5.Finds bugs which are not found during verification
			  6.Testing  Team along with QA Team


What is Quality Assurance?

Quality Assurance is popularly known as QA Testing, is defined as an activity to 
	ensure that an organization is providing the best possible product or service to customers.

	1.It is a procedure that focuses on providing assurance that quality requested will be achieved
	QA aims to prevent the defect
	2.It is a method to manage the quality- Verification
	3.It does not involve executing the program
	4.It's a Preventive technique
	5.It's a Proactive measure
	6.It is the procedure to create the deliverables
	6.QA involves in full software development life cycle
	7.In order to meet the customer requirements, QA defines standards and methodologies
	8.It is performed before Quality Control
	9.It is a Low-Level Activity, it can identify an error and mistakes which QC cannot
	10.Its main motive is to prevent defects in the system. It is a less time-consuming activity
	11.QA ensures that everything is executed in the right way, and that is why it falls under verification activity
	12.It requires the involvement of the whole team
	13.The statistical technique applied on QA is known as SPC or Statistical Process Control (SPC)




Quality Control in Software Testing is a systematic set of processes used to ensure the quality of software products or services. The main purpose of the quality control process is ensuring that the software product meets the actual requirements by testing and reviewing its functional and non-functional requirements. Quality control is popularly abbreviated as QC.


	1.It is a procedure that focuses on fulfilling the quality requested.
	3.It is a method to verify the quality-Validation
	4.It always involves executing a program
	5.It's a Corrective technique
	6.It's a Reactive measure
	7.It is the procedure to verify that deliverables
	8.QC involves in full software testing life cycle
	9.QC confirms that the standards are followed while working on the product
	10.It is performed only after QA activity is done
	11.It is a High-Level Activity, it can identify an error that QA cannot
	12.Its main motive is to identify defects or bugs in the system. It is a more time-consuming activity
	13.QC ensures that whatever we have done is as per the requirement, and that is why it falls under validation activity
	14.It requires the involvement of the Testing team
	15.The statistical technique applied to QC is known as SQC or Statistical Quality Control

V-Model in Software Testing

V Model is a highly disciplined SDLC model in which there is a testing phase parallel to each development phase. 
The V model is an extension of the waterfall model in which testing is done on each stage parallel with development in a sequential way. It is known as the Validation or Verification Model.

SDLC: SDLC is Software Development Life Cycle. 
	It is the sequence of activities carried out by Developers to design and develop high-quality software.

STLC: STLC is Software Testing Life Cycle. 
	It consists of a series of activities carried out by Testers methodologically to test your software product.

Problem with the Waterfall Model

Solution: The V Model

	The left side of the model is Software Development Life Cycle - SDLC
	The right side of the model is Software Test Life Cycle - STLC
	The entire figure looks like a V, hence the name V - model
	
STLC Phases

There are following six major phases in every Software Testing Life Cycle Model (STLC Model):

	1.Requirement Analysis
	2.Test Planning
	3.Test case development
	4.Test Environment setup
	5.Test Execution
	6.Test Cycle closure


What is Entry and Exit Criteria in STLC?

Entry Criteria: 
		Entry Criteria gives the prerequisite items that must be completed before testing can begin.
Exit Criteria: 
		Exit Criteria defines the items that must be completed before testing can be concluded


1.Requirement Analysis
		
	Activities in Requirement Phase Testing
		1.Identify types of tests to be performed. 
		2.Gather details about testing priorities and focus.
		3.Prepare Requirement Traceability Matrix (RTM).
		4.Identify test environment details where testing is supposed to be carried out. 
		5.Automation feasibility analysis (if required).

	Deliverables of Requirement Phase Testing

		1.RTM (equirements Traceability Matrix)
			is a document that links requirements throughout the validation process. 
			The purpose of the Requirements Traceability Matrix is to ensure that all requirements defined for 
				a system are tested in the test protocols
		
		2.Automation feasibility report. (if applicable)

	
2.Test Planning
		
	Test Planning Activities
		1.Preparation of test plan/strategy document for various types of testing
		2.Test tool selection
		3.Test effort estimation
		4.Resource planning and determining roles and responsibilities.
		5.Training requirement
	
	Deliverables of Test Planning
		1.Test plan /strategy document.
		2.Effort estimation document.
	
3.Test case development

	Test Case Development Activities
		1.Create test cases, automation scripts (if applicable)
		2.Review and baseline test cases and scripts
		3.Create test data (If Test Environment is available)
	
	Deliverables of Test Case Development
		1.Test cases/scripts
		2.Test data	

4.Test Environment setup
	Test Environment Setup Activities
		1.Understand the required architecture, environment set-up and prepare hardware 
		   and software requirement list for the Test Environment.
		2.Setup test Environment and test data
		3.Perform smoke test on the build

	Deliverables of Test Environment Setup
		1.Environment ready with test data set up
		2.Smoke Test Results.

5.Test Execution
	Test Execution Activities
		1.Execute tests as per plan
		2.Document test results, and log defects for failed cases
		3.Map defects to test cases in RTM
		4.Retest the Defect fixes
		5.Track the defects to closure

	Deliverables of Test Execution
		1.Completed RTM with the execution status
		2.Test cases updated with results
		3.Defect reports


6.Test Cycle closure
	Test Cycle Closure Activities
		1.Evaluate cycle completion criteria based on Time, Test coverage, Cost,Software, Critical Business Objectives, Quality
		2.Prepare test metrics based on the above parameters.
		3.Document the learning out of the project
		4.Prepare Test closure report
		5.Qualitative and quantitative reporting of quality of the work product to the customer.
		6.Test result analysis to find out the defect distribution by type and severity.

	Deliverables of Test Cycle Closure
		1.Test Closure report
		2.Test metrics

		
_____________________________________________________________________________________________________________________________________


What is Automated Testing?

Automation Testing or Test Automation is a software testing technique that performs 
	using special automated testing software tools to execute a test case suite. 
	On the contrary, Manual Testing is performed by a human sitting in front of a computer carefully executing the test steps.


	The automation testing software can also enter test data into the System Under Test, compare expected and actual results and 
		generate detailed test reports. 

Software Test Automation demands considerable investments of money and resources.

Why Test Automation?

	Manual Testing of all workflows, all fields, all negative scenarios is time and money consuming
	It is difficult to test for multilingual sites manually
	Test Automation in software testing does not require Human intervention. You can run automated test unattended (overnight)
	Test Automation increases the speed of test execution
	Automation helps increase Test Coverage
	Manual Testing can become boring and hence error-prone.


Which Test Cases to Automate?

	High Risk - Business Critical test cases
	Test cases that are repeatedly executed
	Test Cases that are very tedious or difficult to perform manually
	Test Cases which are time-consuming
	
	The following category of test cases are not suitable for automation:

		Test Cases that are newly designed and not executed manually at least once
		Test Cases for which the requirements are frequently changing
		Test cases which are executed on an ad-hoc basis.

Automated Testing Process:
	
	Step 1) Test Tool Selection
	Step 2) Define scope of Automation
	Step 3) Planning, Design and Development
	Step 4) Test Execution
	Step 5) Maintenance



Test tool selection
	Test Tool selection largely depends on the technology the Application Under Test is built on

	Define the scope of Automation
		The features that are important for the business
		Scenarios which have a large amount of data
		Common functionalities across applications
		Technical feasibility
		The extent to which business components are reused
		The complexity of test cases
		Ability to use the same test cases for cross-browser testing

	Planning, Design, and Development
		Automation tools selected
		Framework design and its features
		In-Scope and Out-of-scope items of automation
		Automation testbed preparation
		Schedule and Timeline of scripting and execution
		Deliverables of Automation Testing


	Test Execution
		Automation Scripts are executed during this phase. 
		The scripts need input test data before there are set to run. 
		Once executed they provide detailed test reports.

	
	Framework for Automation
		Maintaining consistency of Testing
		Improves test structuring
		Minimum usage of code
		Less Maintenance of code
		Improve re-usability
		Non Technical testers can be involved in code
		The training period of using the tool can be reduced
		Involves Data wherever appropriate
		
	Benefits of Automation Testing
		70% faster than the manual testing
		Wider test coverage of application features
		Reliable in results
		Ensure Consistency
		Saves Time and Cost
		Improves accuracy
		Human Intervention is not required while execution
		Increases Efficiency
		Better speed in executing tests
		Re-usable test scripts
		Test Frequently and thoroughly
		More cycle of execution can be achieved through automation
		Early time to market

	Types of Automated Testing
		Smoke Testing
		Unit Testing
		Integration Testing
		Functional Testing
		Keyword Testing
		Regression Testing
		Data Driven Testing
		Black Box Testing

	How to Choose an Automation Tool?
		Environment Support
		Ease of use
		Testing of Database
		Object identification
		Image Testing
		Error Recovery Testing
		Object Mapping
		Scripting Language Used
		Support for various types of test - including functional, test management, mobile, etc...
		Support for multiple testing frameworks
		Easy to debug the automation software scripts
		Ability to recognize objects in any environment
		Extensive test reports and results
		Minimize training cost of selected tools


	Automation Testing Tools
		Testim
		LambdaTest
		Selenium
		 It is a software testing tool used for Regression Testing. 
		 It is an open source testing tool that provides playback and recording facility for Regression Testing. 


White Box (or glass box) testing
	White Box (or glass box) testing is the process of 
		giving input code to the system and 
		checking how the system processes it how the output is generated using that code. 

	This is the test where the team tests the internal logic of the code written.
	It is the process of checking how the system processes input to give a suitable output by giving it the required input.
	

	It involves testing a system with full access to source code and other architecture documents. 
	This testing reveals bugs and vulnerabilities as quickly as possible. 
	In comparison to an authentic trial and error method, this white box testing is way quicker.

	By exactly knowing what to test, more testing coverage is ensured. 
	This type of testing involves testing of the application. 
	It needs knowledge of code and test cases chosen if the system is implemented as expected it is verified.
	It is basically checking whether the given code gives out expected results.


Black Box testing

	Black box testing is a method of testing where the input is given to the system and the output is checked, 
		no matter how it was generated. It is done at an outer level.
	It can be done without any knowledge of the system as of how it works. 
	However, it is a less good way of testing when compared to white box testing as no internal knowledge is concerned it this. 
	Any glitch cannot be corrected as there is no architectural or code knowledge involved.
	The system is tested by the team just for the suitable output for the given input. Hence the application is tested here.


Gray Box Testing
	
	This is the combination of both white box and black box testing.
	In this type of testing the tester has limited knowledge of the system and the internal applications. Just the output is 		checked as per the given inputs.
	Gray Box testing is a combination of White Box and Glass Box Testing. 
	In this Gray box testing, the tester need not have the knowledge about the internal working of the software.
	Only the output, the process of how the output has arrived is tested in this method.



























